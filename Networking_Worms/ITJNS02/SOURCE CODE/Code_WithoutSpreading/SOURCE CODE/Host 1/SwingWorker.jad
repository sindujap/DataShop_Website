// Decompiled by DJ v3.5.5.77 Copyright 2003 Atanas Neshkov  Date: 3/31/2002 3:40:55 PM
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   SwingWorker.java

import javax.swing.SwingUtilities;

public abstract class SwingWorker
{
    private static class ThreadVar
    {

        synchronized Thread get()
        {
            return thread;
        }

        synchronized void clear()
        {
            thread = null;
        }

        private Thread thread;

        ThreadVar(Thread thread1)
        {
            thread = thread1;
        }
    }


    protected synchronized Object getValue()
    {
        return value;
    }

    private synchronized void setValue(Object obj)
    {
        value = obj;
    }

    public abstract Object construct();

    public void finished()
    {
    }

    public void interrupt()
    {
        Thread thread1 = threadVar.get();
        if(thread1 != null)
            thread1.interrupt();
        threadVar.clear();
    }

    public Object get()
    {
        do
        {
            Thread thread1 = threadVar.get();
            if(thread1 == null)
                return getValue();
            try
            {
                thread1.join();
            }
            catch(InterruptedException interruptedexception)
            {
                Thread.currentThread().interrupt();
                return null;
            }
        } while(true);
    }

    public SwingWorker()
    {
        final Runnable doFinished = new Runnable() {

            public void run()
            {
                finished();
            }

            final SwingWorker this$0;

            
            {
                this$0 = SwingWorker.this;
                super();
            }
        };
        Runnable runnable = new Runnable() {

            public void run()
            {
                setValue(construct());
                threadVar.clear();
                break MISSING_BLOCK_LABEL_40;
                Exception exception;
                exception;
                threadVar.clear();
                throw exception;
                SwingUtilities.invokeLater(doFinished);
                return;
            }

            final Runnable val$doFinished;
            final SwingWorker this$0;

            
            {
                this$0 = SwingWorker.this;
                doFinished = runnable;
                super();
            }
        };
        Thread thread1 = new Thread(runnable);
        threadVar = new ThreadVar(thread1);
    }

    public void start()
    {
        Thread thread1 = threadVar.get();
        if(thread1 != null)
            thread1.start();
    }

    private Object value;
    private Thread thread;
    private ThreadVar threadVar;


}